{"filter":false,"title":"forms.py","tooltip":"/storyteller_app/forms.py","undoManager":{"mark":6,"position":6,"stack":[[{"start":{"row":14,"column":0},"end":{"row":19,"column":46},"action":"remove","lines":["","class userForm(forms.Form):","    ","    class Meta:","    \tmodel = User","    \tfields = ('name', 'account', 'password',)"],"id":2}],[{"start":{"row":1,"column":34},"end":{"row":1,"column":35},"action":"remove","lines":["r"],"id":3}],[{"start":{"row":1,"column":33},"end":{"row":1,"column":34},"action":"remove","lines":["e"],"id":4}],[{"start":{"row":1,"column":32},"end":{"row":1,"column":33},"action":"remove","lines":["s"],"id":5}],[{"start":{"row":1,"column":31},"end":{"row":1,"column":32},"action":"remove","lines":["U"],"id":6}],[{"start":{"row":1,"column":30},"end":{"row":1,"column":31},"action":"remove","lines":[","],"id":7}],[{"start":{"row":0,"column":0},"end":{"row":15,"column":0},"action":"remove","lines":["from django import forms","from .models import Story,Post","","class AddForm(forms.Form):","    ","    class Meta:","        model = Story","        fields = ('context', 'time', 'auther', 'post_id', 'story_id', 'likes',)","\t","class AddForm2(forms.Form):","    ","    class Meta:","    \tmodel = Post","    \tfields = ('storyTitle', 'created_at', 'created_day', 'created_mon','post_likes', 'firstSentence',)","",""],"id":8},{"start":{"row":0,"column":0},"end":{"row":40,"column":0},"action":"insert","lines":["from django import forms","from .models import Story,Post","","import re","from django.contrib.auth.models import User","from django.utils.translation import ugettext_lazy as _","","","","class AddForm(forms.Form):","    ","    class Meta:","        model = Story","        fields = ('context', 'time', 'auther', 'post_id', 'story_id', 'likes',)","\t","class AddForm2(forms.Form):","    ","    class Meta:","    \tmodel = Post","    \tfields = ('storyTitle', 'created_at', 'created_day', 'created_mon','post_likes', 'firstSentence',)","","class RegistrationForm(forms.Form):"," ","    username = forms.RegexField(regex=r'^\\w+$', widget=forms.TextInput(attrs=dict(required=True, max_length=30)), label=_(\"Username\"), error_messages={ 'invalid': _(\"This value must contain only letters, numbers and underscores.\") })","    email = forms.EmailField(widget=forms.TextInput(attrs=dict(required=True, max_length=30)), label=_(\"Email address\"))","    password1 = forms.CharField(widget=forms.PasswordInput(attrs=dict(required=True, max_length=30, render_value=False)), label=_(\"Password\"))","    password2 = forms.CharField(widget=forms.PasswordInput(attrs=dict(required=True, max_length=30, render_value=False)), label=_(\"Password (again)\"))"," ","    def clean_username(self):","        try:","            user = User.objects.get(username__iexact=self.cleaned_data['username'])","        except User.DoesNotExist:","            return self.cleaned_data['username']","        raise forms.ValidationError(_(\"The username already exists. Please try another one.\"))"," ","    def clean(self):","        if 'password1' in self.cleaned_data and 'password2' in self.cleaned_data:","            if self.cleaned_data['password1'] != self.cleaned_data['password2']:","                raise forms.ValidationError(_(\"The two password fields did not match.\"))","        return self.cleaned_data",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":40,"column":0},"end":{"row":40,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1482414093347,"hash":"16b9eaddce8f6e18516b3d1723ce5ab645ab9db3"}